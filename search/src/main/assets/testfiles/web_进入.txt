package com.lyentech.goodpad.ui.aty;

import android.Manifest;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.media.AudioManager;
import android.os.Build;
import android.os.Environment;
import android.os.Process;
import android.provider.Settings;
import android.text.TextUtils;
import android.util.DisplayMetrics;
import android.view.View;
import android.widget.RadioGroup;
import android.widget.SeekBar;
import android.widget.TextClock;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.annotation.RequiresApi;
import androidx.appcompat.app.AlertDialog;
import androidx.recyclerview.widget.GridLayoutManager;
import androidx.recyclerview.widget.RecyclerView;

import com.android.inputmethod.pinyin.SettingsActivity;
import com.bumptech.glide.Glide;
import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;
import com.gyf.immersionbar.BarHide;
import com.gyf.immersionbar.ImmersionBar;
import com.liulishuo.okdownload.DownloadTask;
import com.liulishuo.okdownload.StatusUtil;
import com.liulishuo.okdownload.core.cause.EndCause;
import com.lyentech.goodpad.R;
import com.lyentech.goodpad.adapter.MoreSettingAdapter;
import com.lyentech.goodpad.adapter.ShortCutAdapter;
import com.lyentech.goodpad.base.BaseActivity;
import com.lyentech.goodpad.base.BasePresenter;
import com.lyentech.goodpad.bean.FileCountEvent;
import com.lyentech.goodpad.bean.ResBean;
import com.lyentech.goodpad.bean.SystemSetBean;
import com.lyentech.goodpad.common.ConUrl;
import com.lyentech.goodpad.common.RxApp;
import com.lyentech.goodpad.common.SetConfig;
import com.lyentech.goodpad.common.UIhelper;
import com.lyentech.goodpad.event.IPChangeEvent;
import com.lyentech.goodpad.global.GlobalCode;
import com.lyentech.goodpad.http.ApiEngine;
import com.lyentech.goodpad.http.RxSchedulers;
import com.lyentech.goodpad.listener.DownLoadImp;
import com.lyentech.goodpad.other.jpush.LocalBroadcastManager;
import com.lyentech.goodpad.utils.DownLoadUtils;
import com.lyentech.goodpad.utils.GetMacUtil;
import com.lyentech.goodpad.utils.GlideUtils;
import com.lyentech.goodpad.utils.MMKVUtil;
import com.lyentech.goodpad.utils.NetUtil;
import com.lyentech.goodpad.utils.ToastUtil;
import com.lyentech.goodpad.utils.ZipFileDecompress;
import com.tbruyelle.rxpermissions2.RxPermissions;
import com.tencent.bugly.beta.Beta;
import com.tencent.smtt.sdk.QbSdk;

import org.greenrobot.eventbus.EventBus;
import org.greenrobot.eventbus.Subscribe;
import org.greenrobot.eventbus.ThreadMode;
import org.json.JSONArray;
import org.json.JSONObject;

import java.io.DataOutputStream;
import java.io.File;
import java.io.OutputStream;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.concurrent.TimeUnit;

import cn.jpush.android.api.JPushInterface;
import io.reactivex.Observable;
import io.reactivex.ObservableEmitter;
import io.reactivex.ObservableOnSubscribe;
import io.reactivex.android.schedulers.AndroidSchedulers;
import io.reactivex.disposables.Disposable;
import io.reactivex.functions.Consumer;
import io.reactivex.schedulers.Schedulers;

public class SystemSetAty extends BaseActivity {

    private final String ONLY_HIDE_STATUS_BAR = "settings put global policy_control immersive.status=*";
    private final String ONLY_HIDE_NAV_BAR = "settings put global policy_control immersive.navigation=*";
    private final String HIDE_BOTH_BAR = "settings put global policy_control immersive.full=*";
    private final String SHOW_BOTH_BAR = "settings put global policy_control null*";

    private static final int TYPE_ONE = 1;
    private static final int TYPE_TWO = 2;
    private static final int TYPE_THREE = 3;
    private static final int TYPE_FOUR = 4;
    private static final int TYPE_FIVE = 5;
    private static final int TYPE_SIX = 6;
    private static final int TYPE_SEVEN = 7;
    public static final int TYPE_EIGHT = 8;

    private boolean BUTTON_ALL_SHOW;
    private boolean BUTTON_ALL_HIDE;
    private boolean BUTTON_HIDE_NAV;
    private boolean BUTTON_HIDE_STATUS;

    private final int CODE_DELETE_VIDEOS = 0X33;
    private String strLog = null;
    private long lastTime = 0L;
    private Disposable disposable1, disposable2;
    private RecyclerView mRv_ShortCut;
    private RecyclerView mRv_MoreSettings;
    private List<SystemSetBean> mDataSSB;
    private List<SystemSetBean> mDataSSM;
    private static int fileCompleteCount = 0; //已下载文件数
    private String newPathVR = null;//VR解压之后的启动路径
    private MoreSettingAdapter msadapter;

    private Disposable disposable;
    private static String statusFile = MMKVUtil.getStr(SetConfig.DATA_VR_DOWNLOAD_STATUS, "未下载");//VR文件下载状态

    @Override
    protected void initAty() {
        if (!EventBus.getDefault().isRegistered(this)) {
            EventBus.getDefault().register(this);
        }
        UIhelper.convertActivityToTranslucent(this);
        initSCT();
        initRVSC();
        initRVMS();
        initReturnAndTime();
        initViewTrans();
        initVoice();
    }

    /**
     * 音量调节
     */
    private void initVoice() {
        SeekBar seekBar = findViewById(R.id.sb_system_voice);
        AudioManager audioManager = (AudioManager) getSystemService(Context.AUDIO_SERVICE);
        assert audioManager != null;
        int maxVolume = audioManager.getStreamMaxVolume(AudioManager.STREAM_MUSIC);
        int curVolume = audioManager.getStreamVolume(AudioManager.STREAM_MUSIC);
        seekBar.setMax(maxVolume);
        seekBar.setProgress(curVolume);
        seekBar.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener() {
            @Override
            public void onProgressChanged(SeekBar seekBar, int progress, boolean fromUser) {
                audioManager.setStreamVolume(AudioManager.STREAM_MUSIC, progress, 0);
            }

            @Override
            public void onStartTrackingTouch(SeekBar seekBar) {

            }

            @Override
            public void onStopTrackingTouch(SeekBar seekBar) {

            }
        });
    }

    /**
     * 快捷方式和更多设置的转换
     */
    private void initViewTrans() {
        RadioGroup radioGroup = findViewById(R.id.rg_systemsettings);
        findViewById(R.id.view_shortcut).setSelected(true);
        radioGroup.setOnCheckedChangeListener(new RadioGroup.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(RadioGroup radioGroup, int i) {
                if (i == R.id.rb_shortcut) {
                    initLeftView();
                } else {
                    initRightView();
                }
            }
        });
    }

    /**
     * 更多设置视图
     */
    private void initRightView() {
        findViewById(R.id.rl_system_voice).setVisibility(View.GONE);
        findViewById(R.id.rl_system_save).setVisibility(View.VISIBLE);
        findViewById(R.id.view_shortcut).setSelected(false);
        findViewById(R.id.view_moresets).setSelected(true);
        mRv_ShortCut.setVisibility(View.GONE);
        mRv_MoreSettings.setVisibility(View.VISIBLE);
    }

    /**
     * 快捷方式视图
     */
    private void initLeftView() {
        findViewById(R.id.rl_system_voice).setVisibility(View.VISIBLE);
        findViewById(R.id.rl_system_save).setVisibility(View.GONE);
        findViewById(R.id.view_shortcut).setSelected(true);
        findViewById(R.id.view_moresets).setSelected(false);
        mRv_ShortCut.setVisibility(View.VISIBLE);
        mRv_MoreSettings.setVisibility(View.GONE);
    }

    /**
     * 退出和系统时间的显示
     */
    private void initReturnAndTime() {
        //退出
        findViewById(R.id.ll_sys_return).setOnClickListener(view -> finish());
        //时间显示
        TextClock textClock = findViewById(R.id.tc_system_time);
        textClock.setFormat24Hour("yyyy-MM-dd HH:mm:ss");
    }

    /**
     * 快捷方式功能实现
     */
    private void initRVSC() {
        mRv_ShortCut = findViewById(R.id.rv_shortcut);
        ShortCutAdapter scAdapter = new ShortCutAdapter(this, mDataSSB);
        mRv_ShortCut.setLayoutManager(new GridLayoutManager(this, 4));
        mRv_ShortCut.setAdapter(scAdapter);

        scAdapter.setOnItemClickListener((strText, position) -> {
            switch (strText) {
                case "系统设定":  //系统设定
                    Intent intent = new Intent(Settings.ACTION_SETTINGS);
                    startActivity(intent);
                    break;
                case "缓存清除":  // 缓存清除
                    deleteCache();
                    break;
                case "WIFI连接": //WIFI连接
                    startActivity(new Intent(Settings.ACTION_WIFI_SETTINGS));
                    break;
                case "浏览器": //浏览器
                    UIhelper.getAllApps(getCurActivity());
                    UIhelper.switch2App(getCurActivity(), "浏览器");
                    break;
                case "设备关机": //设备关机
                    UIhelper.shutDown(getCurActivity());
                    break;
                case "设备重启": //设备重启
                    UIhelper.reboot(getCurActivity());
                    break;
                case "系统重启": //系统重启
                    Intent appIntent = getPackageManager().getLaunchIntentForPackage(UIhelper.getPackageName());
                    assert appIntent != null;
                    appIntent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
                    startActivity(appIntent);
                    Process.killProcess(Process.myPid());
                    break;
                case "更新检查": //更新检查
                    GlobalCode.printLog(".>>check>");
                    Beta.checkUpgrade();
                    break;
                case "文件系统": //文件系统
                    UIhelper.switch2App(getCurActivity(), "文件管理");
                    break;
                case "文件下载": //文件下载
                    UIhelper.switch2App(getCurActivity(), "下载");
                    break;
                case "视频缓存清除": //视频缓存清除
                    new RxPermissions(getCurActivity()).request(Manifest.permission.WRITE_EXTERNAL_STORAGE)
                            .subscribe(aBoolean -> {
                                GlobalCode.printLog("lSize=" + GlobalCode.getFileSizes(((RxApp) RxApp.getContext()).getDownLoadDir()));
                                UserTipAty.launchAty(getCurActivity(), "清除所有视频文件：" + GlobalCode.getFileOrFilesSize(((RxApp) RxApp.getContext()).getDownLoadDir().getAbsolutePath(), 3) + "MB", CODE_DELETE_VIDEOS);
                            }, throwable -> GlobalCode.printLog(throwable));
                    break;
                case "谷歌浏览器": //谷歌浏览器
                    UIhelper.switch2App(getCurActivity(), "Chrome");
                    break;
                case "系统图库": //系统图库
                    UIhelper.switch2App(getCurActivity(), "图库");
                    break;
                case "时间设置": //时间设置
                    startActivity(new Intent(Settings.ACTION_DATE_SETTINGS));
                    break;
                case "系统语言设置": //系统语言设置
                    startActivity(new Intent(Settings.ACTION_LOCALE_SETTINGS));
                    break;
                case "输入法设置": //输入法设置
                    UIhelper.switch2Aty(getCurActivity(), SettingsActivity.class);
                    break;
            }
        });
    }

    /**
     * 清除缓存
     */
    private void deleteCache() {
        String jsonLocal = MMKVUtil.getStr(SetConfig.DATA_CACHE_LOCAL_SERVICE);
        if (!TextUtils.isEmpty(jsonLocal)) {
            try {
                JSONObject js = new JSONObject(jsonLocal);
                JSONArray jsonArray = js.getJSONArray("list");
                for (int i = 0; i < jsonArray.length(); i++) {
                    MMKVUtil.remove(SetConfig.DATA_CACHE_LOCAL + jsonArray.getJSONObject(i).getString("id"));
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        MMKVUtil.remove(SetConfig.DATA_CACHE_LOCAL_SERVICE);
        MMKVUtil.remove(SetConfig.DATA_CACHE_GUIDE_LOCAL);
        MMKVUtil.remove(SetConfig.DATA_CACHE_CLUB); //清除门店id
        //MMKVUtil.remove(SetConfig.ARG_IP_HOST);     //清除手写域名
        MMKVUtil.remove(SetConfig.DATA_CACHE_MAIN); //清除首页接口缓存
        MMKVUtil.remove(SetConfig.DATA_CACHE_GOODS_VIDEO);//清除优品视频
        //MMKVUtil.remove(SetConfig.DATA_RANDOM_MAC); //清掉手写Mac
        SetConfig.DATA_MAIN_BACKGROUND = null;      //清除首页背景图
        Observable.create((ObservableOnSubscribe<String>) e -> {
            Glide.get(getCurActivity()).clearDiskCache();//清空图片缓存
            e.onNext("suc");
            e.onComplete();
        }).subscribeOn(Schedulers.io())
                .observeOn(AndroidSchedulers.mainThread())
                .subscribe(s -> GlobalCode.printLog("clear_all_pic_file>>>:" + s), throwable -> GlobalCode.printLog(throwable));
        //        ActivityStackUtil.getScreenManager().popCurActivity(BrowserAty.class);
        pullNewsData();
    }

    /**
     * 首页VR视频下载
     */
    private void DownLoadVR(int position) {
        ToastUtil.showToast("VR视频开始下载...");
        MMKVUtil.addStr(SetConfig.DATA_VR_DOWNLOAD_STATUS, "未下载");
        DownLoadUtils.downloadFile(SetConfig.URL_VR_DOWN_ADDRESS, new DownLoadImp() {
            @Override
            public void taskEnd(@NonNull DownloadTask task, @NonNull EndCause cause, @Nullable Exception realCause) {
                GlobalCode.printLog("VR视频zip文件->taskEnd=" + task.getUrl() + " " + task.getParentFile());
                if (StatusUtil.isCompleted(task)) {
                    Observable.create(new ObservableOnSubscribe<String>() {
                        @RequiresApi(api = Build.VERSION_CODES.N)
                        @Override
                        public void subscribe(@io.reactivex.annotations.NonNull ObservableEmitter<String> e) throws Exception {
                            try {
                                if (!e.isDisposed()) {
                                    File file = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOWNLOADS);
                                    String filePath = null;
                                    if (file.isDirectory()) {
                                        File[] files = file.listFiles();
                                        for (File fileSize : files) {
                                            if (fileSize.getName().endsWith(".zip")) {
                                                filePath = fileSize.getAbsolutePath();
                                                break;
                                            }
                                        }
                                    }
                                    GlobalCode.printLog("文件下载地址： " + filePath);
                                    File fileVr = new File(((RxApp) RxApp.getContext()).getPadCacheDir().getAbsolutePath() + "/格力VR展厅");
                                    e.onNext("文件解压中...");
                                    GlobalCode.printLog("文件解压地址： " + fileVr.getAbsolutePath());
                                    boolean isZip = ZipFileDecompress.decompressZip(filePath, fileVr.getAbsolutePath());
                                    GlobalCode.printLog("文件是否解压完成： " + isZip);
                                    if (isZip) {
                                        String strVR = getFileAddress(fileVr.getParent());
                                        if (strVR != null) {
                                            File file1 = new File(filePath);
                                            if (file1.isFile() && file1.getName().endsWith(".zip")) {
                                                file1.delete();
                                            }
                                            e.onNext(strVR);
                                            e.onComplete();
                                        }
                                    }
                                }
                            } catch (Exception exception) {
                                e.onError(exception);
                            }
                        }
                    })
                            .subscribeOn(Schedulers.io())
                            .observeOn(AndroidSchedulers.mainThread())
                            .subscribe(new Consumer<String>() {
                                @Override
                                public void accept(@io.reactivex.annotations.NonNull String s) throws Exception {
                                    if (s.startsWith("文件解压中")) {
                                        statusFile = "解压中";
                                        MMKVUtil.addStr(SetConfig.DATA_VR_DOWNLOAD_STATUS, "解压中");
                                    } else {
                                        statusFile = "已下载";
                                        GlobalCode.printLog("Vr本地视频启动url地址为： " + s);
                                        ToastUtil.showToast("VR视频下载完毕，下次启动时进行本地播放");
                                        MMKVUtil.addStr(SetConfig.DATA_VR_DOWNLOAD_STATUS, "已下载");
                                        MMKVUtil.addStr(SetConfig.DATA_VR_LOCAL_URL, s);
                                    }
                                }
                            });
                } else if (StatusUtil.isSameTaskPendingOrRunning(task)) {
                    ToastUtil.showToast("当前文件正在下载...");
                    statusFile = "";
                } else {
                    ToastUtil.showToast("下载失败，请检查网络");
                }
            }
        });
        File file = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOWNLOADS);
        DownloadTask task = new DownloadTask.Builder(SetConfig.URL_VR_DOWN_ADDRESS, file.getAbsolutePath(), null).build();
        disposable = Observable.interval(1000, TimeUnit.MILLISECONDS)
                .subscribeOn(Schedulers.io())
                .observeOn(AndroidSchedulers.mainThread())
                .subscribe(new Consumer<Long>() {
                    @Override
                    public void accept(@io.reactivex.annotations.NonNull Long aLong) throws Exception {
                        GlobalCode.printLog("Observable.interval.statusFile==> " + statusFile);
                        try {
                            if (StatusUtil.isSameTaskPendingOrRunning(task)) {
                                int percent = (int) (((float) task.getInfo().getTotalOffset() / task.getInfo().getTotalLength()) * 100);
                                GlobalCode.printLog("文件下载进度：" + percent + "% ");
                                SystemSetBean bean = mDataSSM.get(position);
                                bean.setSsbTextRight("：下载中 " + percent + " %");
                                msadapter.notifyItemChanged(position);
                            }
                            if (statusFile.equals("解压中")) {
                                SystemSetBean bean = mDataSSM.get(position);
                                bean.setSsbTextRight("：解压中...");
                                msadapter.notifyItemChanged(position);
                            } else if (statusFile.equals("已下载")) {
                                SystemSetBean bean = mDataSSM.get(position);
                                bean.setSsbTextRight("：已下载");
                                msadapter.notifyItemChanged(position);
                                statusFile = "";
                                stopTimer();
                            }
                        } catch (Exception exception) {
                            exception.printStackTrace();
                        }
                    }
                }, new Consumer<Throwable>() {
                    @Override
                    public void accept(@io.reactivex.annotations.NonNull Throwable throwable) throws
                            Exception {
                        throwable.printStackTrace();
                    }
                });
    }

    /**
     * 停止定时执行
     */
    protected void stopTimer() {
        if (disposable != null) {
            disposable.dispose();
            disposable = null;
        }
    }

    /**
     * 获取解压后的VR视频打开地址
     * 这是一个url,不是文件路径
     *
     * @param descDir
     * @return
     */
    private String getFileAddress(String descDir) {
        String pathVR = null;
        File filePath = new File(descDir);
        if (filePath.isDirectory()) {
            File[] files = filePath.listFiles();
            for (File file : files) {
                if (file.isFile() && file.getName().equals("index.html")) {
                    pathVR = "file://" + file.getAbsolutePath();
                    break;
                } else if (file.isDirectory()) {
                    getFileAddress(file.getAbsolutePath());
                }
            }
        } else if (filePath.isFile() && filePath.getName().equals("index.html")) {
            pathVR = "file://" + filePath.getAbsolutePath();
        }
        if (!(pathVR == null)) {
            newPathVR = pathVR;
        }
        return newPathVR;
    }

    private void initRVMS() {
        BUTTON_HIDE_STATUS = mDataSSM.get(0).getSsbSwitch();
        BUTTON_HIDE_NAV = mDataSSM.get(1).getSsbSwitch();
        BUTTON_ALL_HIDE = mDataSSM.get(2).getSsbSwitch();
        BUTTON_ALL_SHOW = mDataSSM.get(3).getSsbSwitch();
        mRv_MoreSettings = findViewById(R.id.rv_moresettings);
        GridLayoutManager manager = new GridLayoutManager(this, 12);
        manager.setSpanSizeLookup(new GridLayoutManager.SpanSizeLookup() {
            @Override
            public int getSpanSize(int position) {

                if (mDataSSM.get(position).getSsbTag() == TYPE_THREE) {
                    return 3; //12/3=4 每行4个
                } else if (mDataSSM.get(position).getSsbTag() == TYPE_FOUR) {
                    return 12;
                } else if (mDataSSM.get(position).getSsbTag() == TYPE_FIVE) {
                    return 4;
                } else if (mDataSSM.get(position).getSsbTag() == TYPE_SIX) {
                    return 6;
                } else {
                    return 6;
                }
            }
        });

        mRv_MoreSettings.setLayoutManager(manager);
        Objects.requireNonNull(mRv_MoreSettings.getItemAnimator()).setChangeDuration(0);
        msadapter = new MoreSettingAdapter(this, mDataSSM);
        mRv_MoreSettings.setAdapter(msadapter);
        msadapter.setOnItemClickListener(new MoreSettingAdapter.OnItemClickListener() {
            @Override
            public void onClick(String ssbTextLeft, boolean isChecked, int position) {
                switch (ssbTextLeft) {
                    case "返回键置低": //返回键置低
                        MMKVUtil.addBool(SetConfig.CODE_DOWN_CLOSE, isChecked);
                        mDataSSM.get(position).setSsbSwitch(isChecked);
                        break;
                    case "进度条收起": //进度条收起
                        MMKVUtil.addBool(SetConfig.CODE_HIDE_PROGRESS, isChecked);
                        mDataSSM.get(position).setSsbSwitch(isChecked);
                        break;
                    case "原生浏览器": //启用原生浏览器
                        MMKVUtil.addBool(SetConfig.CODE_USE_NATICE_WEB, isChecked);
                        mDataSSM.get(position).setSsbSwitch(isChecked);
                        break;
                    case "全显示": //全显示
                        BUTTON_ALL_SHOW = isChecked;
                        break;
                    case "全隐藏": //全隐藏
                        BUTTON_ALL_HIDE = isChecked;
                        break;
                    case "隐藏导航栏": //隐藏导航栏
                        BUTTON_HIDE_NAV = isChecked;
                        break;
                    case "隐藏通知栏": //隐藏通知栏
                        BUTTON_HIDE_STATUS = isChecked;
                        break;
                }
                initSave();
            }

            @Override
            public void onEditClick(String ssbTextLeft, String strEdit, int position) {
                switch (ssbTextLeft) {
                    case "设备唯一标识": //设备唯一标识
                        MMKVUtil.addStr(SetConfig.ARG_CALL_DEVICESN, strEdit);
                        break;
                    case "动态物理地址": //动态物理地址
                        MMKVUtil.addStr(SetConfig.DATA_RANDOM_MAC, strEdit);
                        break;
                    case "软件名称": //软件名称
                        MMKVUtil.addStr(SetConfig.ARG_CALL_POSITION, strEdit);
                        break;
                }
            }

            @Override
            public void onClick(String ssbTextLeft, String ssbTextRight, int position) {
                switch (ssbTextLeft) {
                    case "IP地址": //服务器地址
                        String ditch = null;//渠道名称
                        String cacheIP = MMKVUtil.getStr(SetConfig.ARG_IP_HOST, null);//获取本地缓存IP
                        if (cacheIP == null) {
                            MMKVUtil.addStr(SetConfig.ARG_IP_HOST, ConUrl.IP_HOST);//本地缓存IP为空，将界面显示的IP[渠道IP]缓存本地
                            cacheIP = ConUrl.IP_HOST;
                        }
                        if (cacheIP.equals(ConUrl.IP_HOST_DEV)) {//此时是测试环境IP，需要切换到生产环境IP[质控部测试环境忽略]
                            ditch = "生产环境IP：";
                            cacheIP = ConUrl.IP_HOST_PRO;
                        } else if (cacheIP.equals(ConUrl.IP_HOST_PRO)) {//此时是生产环境IP，需要切换到测试环境IP
                            ditch = "测试环境IP：";
                            cacheIP = ConUrl.IP_HOST_DEV;
                        }
                        String finalCacheIP = cacheIP;
                        AlertDialog.Builder builder = new AlertDialog.Builder(SystemSetAty.this)
                                .setTitle("是否切换IP地址为：")
                                .setMessage(ditch + cacheIP)
                                .setPositiveButton("确定", new DialogInterface.OnClickListener() {
                                    @Override
                                    public void onClick(DialogInterface dialogInterface, int i) {
                                        MMKVUtil.addStr(SetConfig.ARG_IP_HOST, finalCacheIP);
                                        ConUrl.getHost();
                                        deleteCache();
                                        EventBus.getDefault().post(new IPChangeEvent(true));
                                        finish();
                                    }
                                }).setNegativeButton("取消", (dialogInterface, i) -> {
                                });
                        builder.create().show();
                        break;
                    case "PicCache":
                        GlideUtils.deletePicCache();
                        delayFun(1500, new Runnable() {
                            @Override
                            public void run() {
                                initAty();
                                initRightView();
                            }
                        });
                        break;
                    case "VideoCache":
                        UIhelper.deleteVideoCache(true);
                        delayFun(1500, new Runnable() {
                            @Override
                            public void run() {
                                initAty();
                                initRightView();
                            }
                        });
                        break;
                    case "下载任务":
                        handleDownload();
                        break;
                    case "VR下载":
                        RxPermissions rxPermissions = new RxPermissions(SystemSetAty.this);
                        rxPermissions.request(Manifest.permission.READ_EXTERNAL_STORAGE, Manifest.permission.WRITE_EXTERNAL_STORAGE,
                                Manifest.permission.INTERNET).subscribe(new Consumer<Boolean>() {
                            @RequiresApi(api = Build.VERSION_CODES.N)
                            @Override
                            public void accept(@io.reactivex.annotations.NonNull Boolean aBoolean) throws Exception {
                                if (aBoolean) {
                                    if (ssbTextRight.endsWith("未下载")) {
                                        DownLoadVR(position);
                                    } else if (ssbTextRight.endsWith("已下载")) {
                                        AlertDialog.Builder builder = new AlertDialog.Builder(SystemSetAty.this)
                                                .setTitle("提示：")
                                                .setMessage("文件已存在，确定要重新下载吗？")
                                                .setNegativeButton("取消", (dialogInterface, i) -> {
                                                })
                                                .setPositiveButton("确定", (dialogInterface, i) -> {
                                                    statusFile = "";
                                                    DownLoadVR(position);
                                                });
                                        builder.create().show();
                                    } else {
                                        ToastUtil.showToast("文件正在下载中...");
                                    }
                                } else {
                                    ToastUtil.showToast("未授予权限，该功能无法使用");
                                }
                            }
                        });
                        break;
                }
            }
        });
        findViewById(R.id.rl_system_save).setOnClickListener(view -> {
            finish();
        });
    }

    /**
     * 设置保存
     */
    private void initSave() {
        if (BUTTON_ALL_SHOW) {
            execCmd(SHOW_BOTH_BAR);
            mDataSSM.get(3).setSsbSwitch(BUTTON_ALL_SHOW);
        } else {
            if (BUTTON_ALL_HIDE) {
                execCmd(HIDE_BOTH_BAR);
                mDataSSM.get(2).setSsbSwitch(BUTTON_ALL_HIDE);
            } else {
                if (BUTTON_HIDE_NAV) {
                    execCmd(ONLY_HIDE_STATUS_BAR);
                    mDataSSM.get(1).setSsbSwitch(BUTTON_HIDE_NAV);
                }
                if (BUTTON_HIDE_STATUS) {
                    execCmd(ONLY_HIDE_NAV_BAR);
                    mDataSSM.get(0).setSsbSwitch(BUTTON_HIDE_STATUS);
                }
            }
        }
        MMKVUtil.addBool(SetConfig.CODE_SHOW_BOTH_BAR, BUTTON_ALL_SHOW);
        MMKVUtil.addBool(SetConfig.CODE_HIDE_BOTH_BAR, BUTTON_ALL_HIDE);
        MMKVUtil.addBool(SetConfig.CODE_HIDE_NAV_BAR, BUTTON_HIDE_NAV);
        MMKVUtil.addBool(SetConfig.CODE_HIDE_STATUS_BAR, BUTTON_HIDE_STATUS);
    }

    private void execCmd(String cmd) {
        GlobalCode.printLog("execCmd: " + cmd);
        OutputStream outputStream = null;
        DataOutputStream dataOutputStream = null;
        try {
            java.lang.Process p = Runtime.getRuntime().exec("su"); //sh
            outputStream = p.getOutputStream();
            dataOutputStream = new DataOutputStream(outputStream);
            dataOutputStream.writeBytes(cmd);
            dataOutputStream.flush();
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (null != dataOutputStream) {
                try {
                    dataOutputStream.close();
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
            if (null != outputStream) {
                try {
                    outputStream.close();
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        }
    }

    /**
     * 数据添加
     */
    private void initSCT() {
        mDataSSB = new ArrayList<>();
        mDataSSB.add(new SystemSetBean(R.mipmap.ic_system_set, "系统设定", TYPE_ONE));
        mDataSSB.add(new SystemSetBean(R.mipmap.ic_delete_cache, "缓存清除", TYPE_ONE));
        mDataSSB.add(new SystemSetBean(R.mipmap.ic_connect_wifi, "WIFI连接", TYPE_ONE));
        mDataSSB.add(new SystemSetBean(R.mipmap.ic_browser, "浏览器", TYPE_ONE));
        mDataSSB.add(new SystemSetBean(R.mipmap.ic_device_off, "设备关机", TYPE_ONE));
        mDataSSB.add(new SystemSetBean(R.mipmap.ic_device_restart, "设备重启", TYPE_ONE));
        mDataSSB.add(new SystemSetBean(R.mipmap.ic_system_restart, "系统重启", TYPE_ONE));
        mDataSSB.add(new SystemSetBean(R.mipmap.ic_check_updata, "更新检查", TYPE_ONE));

        mDataSSB.add(new SystemSetBean("文件系统", TYPE_TWO));
        mDataSSB.add(new SystemSetBean("文件下载", TYPE_TWO));
        mDataSSB.add(new SystemSetBean("视频缓存", TYPE_TWO));
        mDataSSB.add(new SystemSetBean("谷歌浏览器", TYPE_TWO));
        mDataSSB.add(new SystemSetBean("系统图库", TYPE_TWO));
        mDataSSB.add(new SystemSetBean("时间设置", TYPE_TWO));
        mDataSSB.add(new SystemSetBean("语言设置", TYPE_TWO));
        mDataSSB.add(new SystemSetBean("输入法设置", TYPE_TWO));

        mDataSSM = new ArrayList<>();
        mDataSSM.add(new SystemSetBean("隐藏通知栏", MMKVUtil.getBool(SetConfig.CODE_HIDE_STATUS_BAR, false), TYPE_THREE));
        mDataSSM.add(new SystemSetBean("隐藏导航栏", MMKVUtil.getBool(SetConfig.CODE_HIDE_NAV_BAR, false), TYPE_THREE));
        mDataSSM.add(new SystemSetBean("全隐藏", MMKVUtil.getBool(SetConfig.CODE_HIDE_BOTH_BAR, false), TYPE_THREE));
        mDataSSM.add(new SystemSetBean("全显示", MMKVUtil.getBool(SetConfig.CODE_SHOW_BOTH_BAR, false), TYPE_THREE));
        mDataSSM.add(new SystemSetBean("返回键置低", MMKVUtil.getBool(SetConfig.CODE_DOWN_CLOSE, false), TYPE_THREE));
        mDataSSM.add(new SystemSetBean("进度条收起", MMKVUtil.getBool(SetConfig.CODE_HIDE_PROGRESS, false), TYPE_THREE));
        mDataSSM.add(new SystemSetBean("原生浏览器", MMKVUtil.getBool(SetConfig.CODE_USE_NATICE_WEB, false), TYPE_THREE));

        mDataSSM.add(new SystemSetBean("系统信息", TYPE_FOUR));
        mDataSSM.add(new SystemSetBean("软件版本：", UIhelper.getVersionName() + "." + UIhelper.getVersionCode(), TYPE_FIVE));
        mDataSSM.add(new SystemSetBean("系统版本：", Build.VERSION.RELEASE, TYPE_FIVE));
        DisplayMetrics dm = new DisplayMetrics();
        getWindowManager().getDefaultDisplay().getRealMetrics(dm);
        mDataSSM.add(new SystemSetBean("屏幕像素密度：", dm.densityDpi + "", TYPE_FIVE));
        mDataSSM.add(new SystemSetBean("网络状态：", NetUtil.isConnected(this) + "", TYPE_FIVE));
        mDataSSM.add(new SystemSetBean("推送状态：", JPushInterface.getConnectionState(UIhelper.getContext()) + "", TYPE_FIVE));
        mDataSSM.add(new SystemSetBean("屏幕分辨率：", dm.widthPixels + "*" + dm.heightPixels, TYPE_FIVE));
        mDataSSM.add(new SystemSetBean("屏幕密度：", dm.density + "", TYPE_FIVE));
        String x5;
        if (QbSdk.canLoadX5(this) && QbSdk.isTbsCoreInited()) {
            x5 = UIhelper.getString(R.string.x5_normal);
        } else {
            x5 = UIhelper.getString(R.string.x5_fail);
        }
        mDataSSM.add(new SystemSetBean("浏览器内核：", x5, TYPE_FIVE));

        mDataSSM.add(new SystemSetBean("设备唯一标识", MMKVUtil.getStr(SetConfig.ARG_CALL_DEVICESN), TYPE_SIX));
        mDataSSM.add(new SystemSetBean("动态物理地址", MMKVUtil.getStr(SetConfig.DATA_RANDOM_MAC, GetMacUtil.getFormatMac()), TYPE_SIX));
        mDataSSM.add(new SystemSetBean("软件名称", MMKVUtil.getStr(SetConfig.ARG_CALL_POSITION), TYPE_SIX));
        mDataSSM.add(new SystemSetBean("IP地址", "：" + MMKVUtil.getStr(SetConfig.ARG_IP_HOST, ConUrl.IP_HOST), TYPE_EIGHT));

        mDataSSM.add(new SystemSetBean("PicCache", "：" + UIhelper.getGlideCacheSize(getCurActivity()), TYPE_EIGHT));
        long sum = UIhelper.getFolderSize(((RxApp) RxApp.getContext()).getMediaLoadDir()) + UIhelper.getFolderSize(((RxApp) RxApp.getContext()).getDownLoadDir());
        mDataSSM.add(new SystemSetBean("VideoCache", "：" + UIhelper.getFormatSize(sum) + "/" + UIhelper.getSDAvailableSize(), TYPE_EIGHT));
        mDataSSM.add(new SystemSetBean("下载任务", "：" + getCompleteLength() + "/" + getCacheResLength(), TYPE_EIGHT));
        String vrDownStatus = "未下载";

        if (MMKVUtil.getStr(SetConfig.DATA_VR_LOCAL_URL) != null) {
            String fileStatus = MMKVUtil.getStr(SetConfig.DATA_VR_DOWNLOAD_STATUS, null);
            String fileAddress = MMKVUtil.getStr(SetConfig.DATA_VR_LOCAL_URL).replace("file://", "").trim();
            boolean a = (fileStatus != null);
            boolean b = new File(fileAddress).exists();
            boolean c = fileStatus.equals("已下载");
            GlobalCode.printLog("a= " + a + "  b=" + b + "  c=" + c);
            if (fileStatus != null && new File(fileAddress).exists() && fileStatus.equals("已下载")) {
                vrDownStatus = fileStatus;
            }
        }
        mDataSSM.add(new SystemSetBean("VR下载", "：" + vrDownStatus, TYPE_EIGHT));
    }

    private void handleDownload() {
        fileCompleteCount = 0;
        DownLoadUtils.initTask(new DownLoadImp() {
            @Override
            public void taskEnd(@NonNull DownloadTask task, @NonNull EndCause cause, @Nullable Exception realCause) {
                GlobalCode.printLog("taskEnd=" + task.getUrl() + " " + task.getParentFile());
                if (StatusUtil.isCompleted(task))
                    EventBus.getDefault().post(new FileCountEvent(1, ResBean.TYPE_VIDEO));
            }

            @Override
            public void fetchProgress(@NonNull DownloadTask task, int blockIndex, long increaseBytes) {
                try {
                    int percent = (int) (((float) task.getInfo().getTotalOffset() / task.getInfo().getTotalLength()) * 100);
                    GlobalCode.printLog("task=" + percent + "% " + DownLoadUtils.getTaskStatus(task.getUrl()));
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        });
    }

    @Subscribe(threadMode = ThreadMode.MAIN)
    public void onFileCount(FileCountEvent event) {
        if (event != null) {
            fileCompleteCount++;
            if (fileCompleteCount <= getCacheResLength()) {
                MMKVUtil.addInteger(SetConfig.DATA_CACHE_DOWNLOAD, fileCompleteCount);
                initAty();
                initRightView();
                if (fileCompleteCount == getCacheResLength())
                    UIhelper.pushDevMemory();
            }
        }
    }

    private int getCompleteLength() {
        int count = MMKVUtil.getInteger(SetConfig.DATA_CACHE_DOWNLOAD, 0);
        return count;
    }

    private int getCacheResLength() { //总任务数
        String strRes = MMKVUtil.getStr(SetConfig.DATA_CACHE_RES);
        //优先下载参与首页轮播的视频

        List<ResBean> list = new Gson().fromJson(strRes, new TypeToken<List<ResBean>>() {
        }.getType());
        if (null == list || list.size() == 0) {
            return 0;
        }
        return list.size();
    }

    /**
     * 删除文件夹
     * GetPicUtil.deleteAllFiles(this.getExternalFilesDir("images"));
     */
    public void deleteAllFiles(File root) {
        File[] files = root.listFiles();
        if (files != null)
            for (File f : files) {
                if (f.isDirectory()) { // 判断是否为文件夹
                    deleteAllFiles(f);
                    try {
                        f.delete();
                    } catch (Exception ignored) {
                    }
                } else {
                    if (f.exists()) { // 判断是否存在
                        deleteAllFiles(f);
                        try {
                            f.delete();
                        } catch (Exception ignored) {
                        }
                    }
                }
            }
    }

    private void pullNewsData() {
        if (System.currentTimeMillis() - lastTime < 1000 * 5) {
            return;
        }
        lastTime = System.currentTimeMillis();
        strLog = "";
        GlobalCode.printLog("main_" + ConUrl.getUrlMain() + "?deviceUniqueId=" + GetMacUtil.getFormatMac());
        StringBuilder sb = new StringBuilder(); //接收两个异步数据显示？？

        ApiEngine.getInstance().getApiService().doGetRequest(ConUrl.getUrlMain() + "?deviceUniqueId=" + GetMacUtil.getFormatMac())
                .doOnSubscribe(disposable -> disposable1 = disposable)
                .compose(RxSchedulers.io2main())
                .subscribe(responseBody -> {
                    String json = responseBody.string();
                    GlobalCode.printLog("Main_" + json);
                    sb.append("\n");
                    sb.append(json);
                    strLog = sb.toString();
                    Intent msgIntent = new Intent(LaunchAty.MESSAGE_RECEIVE_ACTION);
                    msgIntent.putExtra(LaunchAty.KEY_MESSAGE, json);
                    msgIntent.putExtra("mac", 1);
                    LocalBroadcastManager.getInstance(getCurActivity()).sendBroadcast(msgIntent);
                }, throwable -> {
                    GlobalCode.printLog(throwable);
                    if (throwable.getCause() != null && throwable.getCause().toString().contains("java.net.ConnectException")) {
                        ToastUtil.showToast("Failed to connect to Service");
                    }
                });
    }

    @Override
    protected void onActivityResult(int requestCode, int resultCode, @Nullable Intent data) {
        super.onActivityResult(requestCode, resultCode, data);
        try {
            if (resultCode == CODE_DELETE_VIDEOS) {
                Observable.create((ObservableOnSubscribe<String>) e -> {
                    deleteAllFiles(((RxApp) RxApp.getContext()).getDownLoadDir());
                    e.onNext("清空视频中...");
                }).subscribeOn(Schedulers.io())
                        .observeOn(AndroidSchedulers.mainThread())
                        .subscribe(s -> ToastUtil.showToast(s));
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    @Override
    protected void onDestroy() {
        super.onDestroy();
        EventBus.getDefault().unregister(this);
        if (disposable1 != null)
            disposable1.dispose();
        if (disposable2 != null)
            disposable2.dispose();
        stopTimer();
    }

    @Override
    protected void initImmersionBar() { //键盘跟随编辑框顶起会出现黑边
        super.initImmersionBar();
        ImmersionBar.with(this).fullScreen(true).hideBar(BarHide.FLAG_HIDE_BAR)
                .init();
    }

    @Override
    protected int getLayoutId() {
        return R.layout.activity_system_set_aty;
    }

    @Override
    protected BasePresenter onCreatePresenter() {
        return null;
    }
}



//加载本地文件vr
package com.lyentech.goodpad.ui.presenter;

import android.Manifest;
import android.app.Activity;
import android.graphics.Bitmap;
import android.net.http.SslError;
import android.os.Build;
import android.text.TextUtils;
import android.view.View;
import android.webkit.CookieSyncManager;
import android.webkit.JavascriptInterface;
import android.webkit.SslErrorHandler;
import android.webkit.WebChromeClient;
import android.webkit.WebResourceError;
import android.webkit.WebResourceRequest;
import android.webkit.WebResourceResponse;
import android.webkit.WebSettings;
import android.webkit.WebView;
import android.webkit.WebViewClient;

import androidx.annotation.NonNull;
import androidx.recyclerview.widget.LinearLayoutManager;

import com.chad.library.adapter.base.BaseQuickAdapter;
import com.chad.library.adapter.base.listener.OnItemClickListener;
import com.lyentech.goodpad.adapter.LaunchListAdapter;
import com.lyentech.goodpad.bean.GoodsBean;
import com.lyentech.goodpad.bean.MainResponse;
import com.lyentech.goodpad.common.ConUrl;
import com.lyentech.goodpad.common.SetConfig;
import com.lyentech.goodpad.global.GlobalCode;
import com.lyentech.goodpad.global.HttpPresenter;
import com.lyentech.goodpad.http.DisposeCallback;
import com.lyentech.goodpad.other.workflow.Node;
import com.lyentech.goodpad.other.workflow.WorkFlow;
import com.lyentech.goodpad.other.workflow.WorkNode;
import com.lyentech.goodpad.other.workflow.Worker;
import com.lyentech.goodpad.ui.aty.PhotoInfoLiteAty;
import com.lyentech.goodpad.ui.contract.LaunchContract;
import com.lyentech.goodpad.utils.GetMacUtil;
import com.lyentech.goodpad.utils.MMKVUtil;
import com.lyentech.goodpad.utils.ToastUtil;
import com.tbruyelle.rxpermissions2.RxPermissions;

import org.json.JSONException;
import org.json.JSONObject;

import java.io.File;
import java.util.ArrayList;
import java.util.List;

import io.reactivex.functions.Consumer;

public class LaunchPresenter extends HttpPresenter<LaunchContract.ILaunchView> {

    public boolean isForce = false; //后台推送来，进行强制刷新
    //工作流-节点执行顺序是有 array的值由小到大执行，不关代码顺序
    private static final int NODE_LAYOUT_CREATE = 10;
    private static final int NODE_APP_INIT = 20;
    private static final int NODE_CACHE_CLEAR = 70;
    private static boolean isErrLoad = false;
    private WorkFlow mWorkFlow;
    private String liangfengtai = "";//亮风台
    private LaunchListAdapter adapter1, adapter2;

    private static long startTime = System.currentTimeMillis();
    private boolean isFirst = true;

    public LaunchPresenter(LaunchContract.ILaunchView view) {
        super(view);
    }

    //开始执行工作流 onComplete后面的代码依然执行
    public void startWorkFlow() {
        mWorkFlow = new WorkFlow.Builder()
                .withNode(getNodeLayoutCreate())
                .withNode(getNodeInitApp())
                .withNode(getNodeClearCache()).create();
        mWorkFlow.start();
    }

    private WorkNode getNodeInitApp() {
        return WorkNode.build(NODE_APP_INIT, new Worker() {
            @Override
            public void doWork(Node curNote) {
                MMKVUtil.addBool(SetConfig.CODE_HIDE_PROGRESS, true);
                MMKVUtil.addBool(SetConfig.CODE_DOWN_CLOSE, true);
                MMKVUtil.addBool(SetConfig.CODE_USE_NATICE_WEB, true);
                doGetArg(false);
            }
        });
    }

    public void doGetArg(boolean isAuto) {
        long nowTime = System.currentTimeMillis();
        if (isAuto || nowTime - startTime > 1000 * 5 || isFirst) {
            String json = MMKVUtil.getStr(SetConfig.DATA_CACHE_MAIN, null);
            if (TextUtils.isEmpty(json) || isAuto) {
                // mModel.httpMap("http://172.28.9.155:23110/" + "venus/api/ahtena/device/cloudShelfHome" + "?deviceUniqueId=" + GetMacUtil.getFormatMac(), new DisposeCallback() {
                mModel.httpMap(ConUrl.getUrlMain() + "?deviceUniqueId=" + GetMacUtil.getFormatMac(), new DisposeCallback() {
                    @Override
                    protected void onRequestSuc(String result) {
                        parseData(result, isAuto);
                    }

                    @Override
                    protected void onRequestErr(Throwable throwable) {
                        ToastUtil.showToast("服务连接异常,请重启系统");
                        if (!isAuto)
                            mWorkFlow.continueWork();
                    }
                });
                adapter1.setList(null);
                adapter2.setList(null);
            } else {
                parseData(json, isAuto);
            }
            isFirst = false;
            startTime = System.currentTimeMillis();
        }
    }

    public void parseData(String json, boolean isAuto) {
        GlobalCode.printLog("json_main=" + json);
        if (!isAuto) {
            mWorkFlow.continueWork(); //这里必须先进入下一个节点
        }
        MainResponse response = GlobalCode.getHttpResponse(json, MainResponse.class);
        if (null != response) {
            try {
                MMKVUtil.addStr(SetConfig.DATA_CACHE_MAIN, json);
                if (response.getGame() != null)
                    SetConfig.URL_GREE_GAME = response.getGame().getGameUrl();
                SetConfig.DATA_MAIN_BACKGROUND = response.getHomePicUrl();
                if (response.getGuide() != null) {
                    SetConfig.DATA_CONTACT_SHOP = response.getGuide().getShopowner();
                    SetConfig.DATA_CONTACT_SALE = response.getGuide().getGuide();
                    SetConfig.DATA_CONTACT_GUIDE = response.getGuide().getGuide();
                }
                if (!TextUtils.isEmpty(response.getDeviceUniqueId())) { //修改了动态Mac,但是不去拉取最新接口数据，这里会覆盖的
                    MMKVUtil.addStr(SetConfig.ARG_CALL_DEVICESN, response.getDeviceUniqueId());
                    MMKVUtil.addStr(SetConfig.DATA_RANDOM_MAC, GetMacUtil.getFormatMac());
                }
                if (!TextUtils.isEmpty(response.getDeviceName())) {
                    MMKVUtil.addStr(SetConfig.ARG_CALL_POSITION, response.getDeviceName());
                }
                if (!TextUtils.isEmpty(response.getStoreId())) {
                    MMKVUtil.addStr(SetConfig.DATA_CACHE_CLUB, response.getStoreId());
                }
                List<GoodsBean> list1 = new ArrayList<>();
                list1.add(new GoodsBean("店长推荐", GoodsBean.TYPE_TITLE));
                List<GoodsBean> list2 = new ArrayList<>();
                list2.add(new GoodsBean("地区热销", GoodsBean.TYPE_TITLE));
                if (response.getRecommended() != null)
                    for (int i = 0; i < response.getRecommended().size(); i++) {
                        response.getRecommended().get(i).setLayoutType(GoodsBean.TYPE_GOODS);
                        list1.add(response.getRecommended().get(i));
                    }
                if (response.getHotRegion() != null)
                    for (int b = 0; b < response.getHotRegion().size(); b++) {
                        response.getHotRegion().get(b).setLayoutType(GoodsBean.TYPE_GOODS);
                        list2.add(response.getHotRegion().get(b));
                    }

                adapter1.setList(list1);
                adapter2.setList(list2);
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }

    private WorkNode getNodeLayoutCreate() {
        return WorkNode.build(NODE_LAYOUT_CREATE, new Worker() {
            @Override
            public void doWork(Node curNote) {
                setWeb();
                setSaleList();
                curNote.onCompleted();
            }
        });
    }

    private void setSaleList() {
        mView.$rvList1().setLayoutManager(new LinearLayoutManager(mView.getCurActivity()));
        List<GoodsBean> list1 = new ArrayList<>();
        adapter1 = new LaunchListAdapter(list1);
        adapter1.setOnItemClickListener(new OnItemClickListener() {
            @Override
            public void onItemClick(@NonNull BaseQuickAdapter<?, ?> adapter, @NonNull View view, int position) {
                if (position == 0) {
                    return;
                }
                GoodsBean goodsBean = (GoodsBean) adapter.getData().get(position);
                if (TextUtils.isEmpty(goodsBean.getSpuUniqueId())) {
                    ToastUtil.showToast("spuUniqueId为null");
                    return;
                }
                PhotoInfoLiteAty.launchAtyAuto(mView.getCurActivity(), "spu," + goodsBean.getSpuUniqueId(), "", 1, true);
            }
        });
        mView.$rvList1().setAdapter(adapter1);

        mView.$rvList2().setLayoutManager(new LinearLayoutManager(mView.getCurActivity()));
        List<GoodsBean> list2 = new ArrayList<>();
        adapter2 = new LaunchListAdapter(list2);
        adapter2.setOnItemClickListener(new OnItemClickListener() {
            @Override
            public void onItemClick(@NonNull BaseQuickAdapter<?, ?> adapter, @NonNull View view, int position) {
                if (position == 0) {
                    return;
                }
                GoodsBean goodsBean = (GoodsBean) adapter.getData().get(position);
                if (TextUtils.isEmpty(goodsBean.getSpuUniqueId())) {
                    ToastUtil.showToast("spuUniqueId为null");
                    return;
                }
                PhotoInfoLiteAty.launchAtyAuto(mView.getCurActivity(), "spu," + goodsBean.getSpuUniqueId(), "", 1, true);
            }
        });
        mView.$rvList2().setAdapter(adapter2);
    }

    public void setWeb() {
        mView.$webView().setWebChromeClient(new WebChromeClient() {
            @Override
            public void onProgressChanged(WebView webView, int newProgress) {

                super.onProgressChanged(webView, newProgress); //监听网页的加载速度
            }
        });
        //该界面打开更多链接
        mView.$webView().setWebViewClient(new WebViewClient() {
            @Override
            public boolean shouldOverrideUrlLoading(WebView webView, String s) {
                return super.shouldOverrideUrlLoading(webView, s);
            }

            @Override
            public void onPageFinished(WebView webView, String s) {
                super.onPageFinished(webView, s);   //会被执行几次的
            }

            @Override
            public void onPageStarted(WebView webView, String s, Bitmap bitmap) {
                webView.setInitialScale(100);
                super.onPageStarted(webView, s, bitmap);
            }

            @Override
            public void onReceivedError(WebView webView, WebResourceRequest webResourceRequest, WebResourceError webResourceError) {
                super.onReceivedError(webView, webResourceRequest, webResourceError);
                if (webResourceRequest.isForMainFrame()) {
                    isErrLoad = true;
                }
            }

            @Override
            public void onReceivedHttpError(WebView webView, WebResourceRequest webResourceRequest, WebResourceResponse webResourceResponse) {
                super.onReceivedHttpError(webView, webResourceRequest, webResourceResponse);

                //在android6.0以上才有。
                int statusCode = webResourceResponse.getStatusCode();
                GlobalCode.printLog("netCode:" + statusCode);
                if (statusCode != 200) {
                    isErrLoad = true;
                }
            }

            @Override
            public void onReceivedSslError(WebView view, SslErrorHandler handler, SslError error) {
                super.onReceivedSslError(view, handler, error);
                handler.proceed();
            }
        });

        WebSettings webSetting = mView.$webView().getSettings();

        webSetting.setAllowFileAccess(true);//当设置为true，就可以使用file://加载文件
        //设置是否允许运行在一个URL环境（the context of a file scheme URL）中的JavaScript访问来自其他URL环境的内容
        webSetting.setAllowFileAccessFromFileURLs(true);
        //设置是否允许运行在一个file schema URL环境下的JavaScript访问来自其他任何来源的内容，包括其他file schema URLs。
        //通过此API可以设置是否允许通过file url加载的Javascript可以访问其他的源，包括其他的文件和http,https等其他的源。
        //与上面的类似，实现一个就可以。
        //webSetting.setAllowUniversalAccessFromFileURLs(true);
        webSetting.setLayoutAlgorithm(WebSettings.LayoutAlgorithm.NARROW_COLUMNS);
        webSetting.setSupportZoom(true);    //支持缩放
        webSetting.setBuiltInZoomControls(true);
        webSetting.setDisplayZoomControls(false);
        webSetting.setUseWideViewPort(false);    //将图片调整到适合web的大小 ,根据加载的页面来设置
        webSetting.setLoadWithOverviewMode(false);//false 再设置setInitialScale

        webSetting.setSupportMultipleWindows(false);
        webSetting.setAppCacheEnabled(true);
        webSetting.setDatabaseEnabled(true);
        webSetting.setDomStorageEnabled(true);
        webSetting.setJavaScriptEnabled(true);
        webSetting.setGeolocationEnabled(true);
        webSetting.setAppCacheMaxSize(Long.MAX_VALUE);
        webSetting.setAppCachePath(mView.getCurActivity().getDir("appcache", 0).getPath());
        webSetting.setDatabasePath(mView.getCurActivity().getDir("databases", 0).getPath());
        webSetting.setGeolocationDatabasePath(mView.getCurActivity().getDir("geolocation", 0)
                .getPath());
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) {
            webSetting.setMediaPlaybackRequiresUserGesture(true);//禁止声音
        }
        long time = System.currentTimeMillis();

        mView.$webView().addJavascriptInterface(new AndroidInterfacePhoto(mView.getCurActivity()), "gree");
        String vrLocal = MMKVUtil.getStr(SetConfig.DATA_VR_LOCAL_URL, null);
        GlobalCode.printLog("vrLocal: " + vrLocal);
        if (vrLocal == null || vrLocal.isEmpty()) {
            mView.$webView().loadUrl(SetConfig.URL_GREE_VR_PRODUCT);
        } else {
            mView.$webView().loadUrl(vrLocal);
        }
        GlobalCode.printLog("cost time: "
                + (System.currentTimeMillis() - time));
        CookieSyncManager.createInstance(mView.getCurActivity());
        CookieSyncManager.getInstance().sync();
    }

    private WorkNode getNodeClearCache() {
        return WorkNode.build(NODE_CACHE_CLEAR, new Worker() {
            @Override
            public void doWork(Node curNote) {
                new RxPermissions(mView.getCurActivity()).request(Manifest.permission.WRITE_EXTERNAL_STORAGE)
                        .subscribe(new Consumer<Boolean>() {
                            @Override
                            public void accept(Boolean aBoolean) throws Exception {

                            }
                        });
                curNote.onCompleted();
            }
        });
    }

    public void loadWeb() {
        String vrLocal = MMKVUtil.getStr(SetConfig.DATA_VR_LOCAL_URL, null);
        if (isErrLoad) {
            //vrLocal是一个URL,使用new File(vrLocal).exists判断得到的永远是false，必须转成绝对路径再判断
            if (vrLocal != null && new File(vrLocal.replace("file://", "").trim()).exists()) {
                mView.$webView().loadUrl(vrLocal);
            } else {
                mView.$webView().loadUrl(SetConfig.URL_GREE_VR_PRODUCT);
            }
            isErrLoad = false;
        }
    }

    public void resumeWeb() {
        mView.$webView().onResume();
//        mView.$webView().addJavascriptInterface(new AndroidInterfacePhoto(mView.getCurActivity()), "gree");
//        mView.$webView().reload();
    }

    public void pauseWeb() {
        mView.$webView().onPause();
    }

    public class AndroidInterfacePhoto {

        private Activity context;

        public AndroidInterfacePhoto(Activity context) {
            this.context = context;
        }

        @JavascriptInterface
        public void openGoodsDetail(String json) {
            try {
                GlobalCode.printLog("gree=" + json);
                JSONObject jsonObject = new JSONObject(json);
                String spuUniqueId = jsonObject.optString("spuUniqueId");
                String skuUniqueId = jsonObject.optString("skuUniqueId");
                liangfengtai = jsonObject.optString("liangfengtai");
                String kujialeJS = jsonObject.optString("kujiale");
                String api = jsonObject.optString("callbackName");

                String value = "";
                if (TextUtils.isEmpty(spuUniqueId)) {
                    value = "sku," + skuUniqueId;
                } else {
                    value = "spu," + spuUniqueId;
                }
                if (mView.$webView() != null)
                    mView.$webView().post(new Runnable() {
                        @Override
                        public void run() {
                            mView.$webView().loadUrl(exJs(liangfengtai));
                        }
                    });
                PhotoInfoLiteAty.launchAtyAuto(context, value, liangfengtai, 1, true);
            } catch (JSONException e) {
                e.printStackTrace();
            }
        }

    }

    private String exJs(String code) {
        StringBuilder sb = new StringBuilder();
        sb.append("javascript:")
                .append("try{ " + code + " }catch(e){}");
        return sb.toString();
    }

    @Override
    public void detach() {
        mWorkFlow.dispose();
        super.detach();
    }
}
